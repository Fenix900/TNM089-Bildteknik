function pixelPos = getPixelPos2(images, imageAmount, sampleAmount)
    % Definiera målvärden
    target = linspace(765, 0, imageAmount); 
    pixelPos = NaN(sampleAmount * imageAmount, 2);
    posInd = 1;
    
    % Skapa en cell-array för att lagra sorterad pixeldata för alla bilder
    allSortedPixelData = cell(imageAmount, 1);

    for i = 1:imageAmount
        % Beräkna summan av bilderna över färgkanalerna
        img_sum = sum(images(:,:,:,i), 3);
        [row, col] = size(img_sum);
        
        % Skapa en cell-array för att lagra pixeldata
        pixelData = cell(row * col, 4); 
        ind = 1;
        
        % Iterera genom alla pixlar
        for r = 1:row
            for c = 1:col
                % Hämta pixelvärdet i position (r,c)
                pixelValue = img_sum(r, c); 
                
                % Spara väsentlig data i pixelData
                pixelData{ind, 1} = r;          % Rad
                pixelData{ind, 2} = c;          % Kolumn
                pixelData{ind, 3} = pixelValue;  % Pixelvärde
                pixelData{ind, 4} = abs(pixelValue - target(i)); % Avståndet till target(i)

                % Uppdatera ind
                ind = ind + 1;
            end
        end

        % Sortera pixelData efter avstånd (fjärde kolumn)
        sorted_pixelData = sortrows(pixelData, 4); 
        
        % Spara den sorterade pixeldata i cell-array
        for i = 1:sampleAmount
            pos = [sorted_pixelData{i, 1}, sorted_pixelData{i, 2}];
            
        end


    end

   
    for i = 1:sampleAmount
            currentImageData = allSortedPixelData{i};

            pos = [currentImageData{i, 1}, currentImageData{i, 2}];  
            
            if ~any(ismember(pixelPos,pos,'rows'))
                pixelPos(posInd, :) = pos;
                posInd = posInd + 1;
            end


    end

    % Ta bort NaN-rader i pixelPos (om det finns färre än sampleAmount positioner)
    pixelPos(all(isnan(pixelPos), 2), :) = [];
end
